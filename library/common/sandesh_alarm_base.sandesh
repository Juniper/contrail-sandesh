/*
 * Copyright (c) 2015 Juniper Networks, Inc. All rights reserved.
 */

/*
 *  sandesh_alarm_base.sandesh
 *
 */

struct Operand1 {
    1: list<string> keys
    2: optional map<byte, string> vars
    3: optional byte json
}

union Operand2 {
    1: list<string> keys 
    2: string json_value
}

/**
 * An AlarmTemplate consists of a comparison operator,
 * and two operands to be compared
 * 
 * operand1 contains a list of keys used to examine the UVE's JSON tree
 * As we process these keys against the UVE's JSON tree:
 *     - If we are at the last key, use the value of the current subtree.
 *       Processing is finished.
 *     - Otherwise
 *       - If the current subtree is a JSON object, go deeper into the subtree 
 *         according to this key. Process the next key in the list
 *       - If the current subtree is a JSON array, process each element of the 
 *         array with the current key
 *       - Any other situation is unexpected; this UVE tree cannot be processed
 *         with this operand specification
 * Also, we will use the "vars" attributes to print parts of the UVE other than
 * the operand1 and operand2 value inthe Alarm description
 *     
 * operand2 is what we want to compare the first operand to
 * It can be either:
 *     - a list of keys to find which part of the UVE
 *       to compare operand1 to. There is no "vars" element.
 *       "vars" can be specified with operand1 only.
 *     - JSON string representing a fixed value
 *       (The special value "null" is used to check for whether operand1 exists,
 *        using the operators "!=" and "=="
 *
 */
struct AlarmTemplate {
    1: string oper
    2: Operand1 operand1
    3: Operand2 operand2
}

struct AlarmCondition {
    1: string operation
    2: string operand1
    3: string operand2
    4: optional list<string> vars
}

struct AlarmMatch {
    1: string json_operand1_value
    2: optional string json_operand2_value
    3: optional map<string, string> json_vars
}

struct AlarmConditionMatch {
    1: AlarmCondition condition
    2: list<AlarmMatch> match
}

struct AlarmRuleMatch {
    1: list<AlarmConditionMatch> rule
}

/**
 * AlarmElement is used to explain why an Alarm was raised.
 * It contains:
 *     - The AlarmTemplate that was violated
 *     - When we examined the UVE, we also noted some parts of the UVE
 *       whose values need to be reported along with the alarm. (from
 *       the "var" attribute of operand1 of the AlarmTemplate)
 *       This is reported as a map, with the the key being the
 *       fully-qualified name of the var
 *     - json string of value seen for operand1. 
 *     - json string of value seen for operand2,
 *       if operand2 was not a fixed value
 */
struct AlarmElement {
    1: AlarmTemplate rule
    2: optional map<string,string> json_vars
    3: string json_operand1_value
    4: optional string json_operand2_value
}

struct AllOf {
    1: list <AlarmElement> all_of
}
/**
 * UVEAlarmInfo is used to report any Alarm
 * It contains:
 *     - Alarm Tyoe
 *     - A description of why the alarm was raised.
 *       This corresponds to an OR of ANDs of the 
 *       AlarmElements of individual AlarmTemplates
 *     - Whether the alarm has been acknowledged yet
 *     - Timestamp
 *     - Severity
 *     - token used when calling the Acknowledgement API
 */
struct UVEAlarmInfo {
    1: string type
    /** "any_of" is deprecated */
    8: optional list<AllOf> any_of
    9: list<AlarmRuleMatch> rules
    3: bool ack
    4: u64 timestamp
    5: byte severity
    6: string token
}

struct UVEAlarmConfig {
    1: u32  ActiveTimer
    2: u32  IdleTimer
    3: bool FreqExceededCheck
    4: u16  FreqCheck_Times
    5: u16  FreqCheck_Seconds
}

struct UVEAlarms {
    1: string name (key="none")
    2: list<UVEAlarmInfo> alarms (aggtype="union")
    3: optional bool deleted
}

alarm sandesh AlarmTrace {
    1: UVEAlarms data
}
